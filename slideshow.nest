<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  
  <!--[if lt IE 9]>
  <script src="../lib/html5shim.js"></script>
  <![endif]-->  
  
  <!-- These are some core styles the slideshow app requires -->
  <link rel="stylesheet" href="../lib/styles.css" />
  
  <!-- These are the styles you'll add to make the slides look great -->
  <link rel="stylesheet" href="css/styles.css" />
  
  <title>Go @ Barcamp Saigon</title>
</head>
<body>
  <header>
    <h1>Go @ Barcamp Saigon</h1>
    <nav>
      <ul>
        <li><button id="prev-btn" title="Previous slide">Previous Slide</button></li>
        <li><span id="slide-number"></span>/<span id="slide-total"></span></li>
        <li><button id="next-btn" title="Next Slide">Next Slide</button></li>
      </ul>
    </nav>
  </header>

  <div id="deck">
    
    <section>
      \hgroup:
        \h1 Concurrent programming with Go

      \img[src=images/gophercolor.png class=mascot]
      \p[class=center]:
          "Using the websocket package, [...] was able to add the web
          viewer on his train ride home."

      \p[class=center]:
          "We wrote [...] in two or three beers."

      <footer>
        \p July 24, 2011
        \p by Trịnh Hải Anh, Web Server Engineer
        \p <a href="http://twitter.com/chickamade">@chickamade</a> <a href="http://search.twitter.com/search?q=%23barcampsaigon">#barcampsaigon</a>
        \p \a[href="http://skunkworks.vn" class=green] Skunkworks.vn
      </footer>
    </section>
    
    <section>
      \hgroup:
        \h1 What is Go?
      
      <ul>
        \li Started at Googlers by Ken Thompson, Rob Pike, ...
        \li Design philosophy: \span[class=green] less is more
        \li Attractive model to write <span class=green>concurrent programs</span>
        \li Originally focused on system projects: databases, networking servers
        \li Has become a general purpose language
        \li Makes programming sensible and fun!
      </ul>
    </section>

    <section>
      <hgroup>
         \h1 Why Go?
         \h2 Concurrency!
      </hgroup>  
      
      <ul>
            \li Writing multi-threaded programs is hard
            \li Too much emphasis on low-level details: locks, mutexes, ...
            \li Asynchronous event callbacks are just a crippled API, where your code run single-threaded :(
      </ul>
    </section>

    <section>
      \hgroup \h1 CSP
    <ul>
      <li>
        In 1978, Tony Hoare introduced the theory of "Communicating Sequential Processes"
        \blockquote \em Input, output, and concurrency should be regarded as primitives of programming
        \blockquote \em Composition of communicating sequential processes is a fundamental program structuring method.
      </li>
      \li Occam and Erlang are two well-known languages that stem from CSP
      \li In Go, concurrency primitives derive from a different part of the CSP family tree with the powerful notion of channels as first class objects
    </ul>
    </section>
 
    <section>
      \hgroup \h1 Goroutines
     <ul>
      \li A goroutine is a Go function or method executing concurrently in the same address space as other goroutines
      \li Goroutines are multiplexed onto a set of operating system threads
      \li When a goroutine blocks, such as by calling a blocking system call, the runtime automatically moves other coroutines to runnable thread
      \li It is practical to create hundreds of thousands of goroutines
     </ul>
    </section>

    <section>
      \hgroup \h1 Channels &amp; Synchronization
    </section>

    <section>
      \hgroup \h1 Code example
      
      <pre>
input := make(chan string)
output := make(chan string)

go {
    input &lt;- "from forked goroutine" // blocks until there is a receiver
}
go {
    for {
       // relay input to output then exits, blocks on receiving, then block on sending
        output &lt;- (&lt;-input)
    }
}
for {
    select {
        case msg := &lt;-output: fmt.Println(msg)
        case input &lt;- "from main": // just send it, do nothing else
    }
}
      </pre>
    </section>

    <section>
      \hgroup \h1 Select
      
      <ul>
        \li Every case must be a communication
        \li If any communication can proceed, it does; others are ignored
        \li If multiple cases are ready, one is selected to proceed at random, fairly
        \li If there is no default case, the select statement blocks until one case can proceed
      </ul>
    </section>
 
    <section>
      \hgroup \h1 Asynchronous I/O
      
      \p Async I/O is kernel optimizations
      \p Some libraries implement system calls and expose a callback API :(
      \p Go use epoll/kqueue under the hood, goroutine is automatically rescheduled after epoll_wait()
    </section>

    <section>
      \hgroup \h1 Networking
      
      \p Awesome
    </section>

    <section>
      \hgroup \h1 The Go Way
      <ul>
        \li Do not communicate by sharing memory. Instead, share memory by communicating.
        \li Shared values should be passed around on channels. Only one goroutine should "own" a value at any given time.
        \li Channel (or set of channels) defines a protocol of interaction with a given resource.
        \li E.g. Rob Pike built a concurrent window system represented by 3 channels: graphics, keyboard, mouse. The window system can run recursively on itself to implement a multi-window text editors.
    </section>

    <section>
       \img[src=images/cws.png]
    </section>

    <section>
      \hgroup:
        \h1 Go is a lot more than concurrency

      <ul>
        \li Duck typing: feels like Python
        \li Segmented stack: no chance of stack overflow
        \li Static compilation, single binary deployment
        \li Call C/C++ code, or just run on bare hardware without OS
        \li Tools: IDEs, goroutine-aware debugger, profiler, code formatter
        \li Standard libraries: zip, jpeg, json, mime/multipart, utf8, websocket, ...
        \li Package management: <code>goinstall github.com/user/project</code>
      </ul>
    </section>

    <section>
       \hgroup \h1 A few bits of history
        <ul>
            \li 1978, "Communicating Sequential Processes" paper by Tony Hoare
            \li 1983, Occam, the first CSP language, runs on dedicated Transputer chip
            \li 1985 &ndash; 1995, Rob Pike &amp; Ken Thompson worked on the Plan 9 OS and several CSP-based languages
            \li 1998, Erlang open-source release, concurrency based on Actor Model
            \li 2006, Erlang gained support for SMP scheduling
            \li 2009, Go went nuts!
            \li 2010 July, prototype implementation of channels <code>select</code> for the Stackless Python module in PyPy
        </ul>
    </section>

    <section>
      \hgroup \h1 Where to go from here?
        <ul>
            \li \a[href=http://golang.org/doc/go_tutorial.html] The official Go language tutorial
            \li Go-nuts mailing list
            \li #go-nuts IRC channel on freenode.org
            \li \a[href=http://golang.org/doc/codewalk/] Go code walks
        </ul>
    </section>

    <section>
      \hgroup \h1 Thank you! Questions?
      <div class=twitter>
        \img[src=images/followme.png]
        \span[class=green] \a[href="http://twitter.com/chickamade" class=green] @chickamade
      </div>

      \p[class=padded\ center\ big] For more information about our company, visit <a href="http://skunkworks.vn/" class=green>Skunkworks.vn.</a> We are hiring!
      
      \a[href=http://skunkworks.vn/] \img [src=images/skunkworks.png class=logo]
    </section>

  </div>
  <!-- /deck -->
  
  <script src="../lib/jquery-1.5.2.min.js"></script>
  <script src="../lib/jquery.jswipe-0.1.2.js"></script>  
  <script src="../lib/htmlSlides.js"></script>
  <script>
    //Do our business when the DOM is ready for us
    $(function() {
      
      //You can trigger Javascript based on the slide number like this:
      $('html').bind('newSlide', function(e, id) { 
        //switch(id) {
        //  case 1:
        //}
      });

      //One little option: hideToolbar (boolean; default = false)
      htmlSlides.init({ hideToolbar: true });
      
    });
  </script>
  </body>
</html>
